 1 GOF 디자인 패턴
GoF(Gang of Four) 패턴: 에리히 감마(Erich Gamma), 리처드 헬름(Richard Helm), 랄프 존슨(Ralph Johnson), 존 블리시데스(John Vlissides)가 같이 고안한 디자인 패턴

23가지 디자인 패턴을 3가지 분류로 정리한 디자인 패턴
-생성 패턴: Abstract Factory, Builder, Factory Method, Prototype, Singleton
-구조 패턴: Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy
-행위 패턴: Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategty, Template Method, Visitor

보기 2번의 Strategy 패턴은 행위 패턴에 해당
[해설작성자 : 이거까지알아야해?]

디자인 패턴 = 생구행을떠올리자
생(성) - 추빌팩프싱      *추 : Abstract Factory(추상팩토리)
구(조) - 어브컴데퍼플프
행(위) - 위에 2개 해당안하면 행위패턴임
[해설작성자 : 지나가던사람]


UML 다이어그램의 분류
정적구조: [ 클래스, 객체, 패키지, 컴포넌트, 복합구조, 배치]
동적구조: [ 유스케이스, 상태, 활동, 시퀀스, 통신, 상호작용, 타이밍]
1) 클래스 다이어그램: 객체를 생성하기 위한 도구
2) 객체 다이어그램: 객체 간의 연결관계를 표현
3) 패키지 다이어그램: 객체들의 그룹화된 표현
4) 컴포넌트 다이어그램: 시스템을 구성하는 컴포넌트 사이에 의존관계를 표현
* 컴포넌트는 1개이상의 클래스로 구현됨.
5) 복합구조 다이어그램: 컴포넌트나 클래스의 내부 구조를 보여주기 위해 사용  내부 연결 형태를 표현
6) 배치 다이어그램: H/W자원에 연결된 S/W컴포넌트 배치를 표현

7) 유스케이스 다이어그램: 사용자의 시각에서 소프트웨어의 범위와 기능을 표현
8) 상태 다이어그램: 시간에 따라 객체가 변하는 상태를 표현
9) 활동 다이어그램: 객체의 동적행위를 활동으로 표현
10) 시퀀스 다이어그램: 객체간 상호작용을 시간 순서에 따른 메시지로 표현
11) 통신 다이어그램: 객체간 상호작용을 관계형태의 메세지로 표현
12) 상호작용 다이어그램: 객체들의 상호작용 관계를 표현
13) 타이밍 다이어그램: 객체간 상태변화를 구체적인 시간으로 표현

단일 책임원칙 : 하나의 객체는 하나의 동작만의 책임을 가짐
개방-폐쇄의 원칙 : 클래스는 확장에 대해 열려 있어야 하며 변경에 대해 닫혀 있어야 한다.
리스코프 교체의 원칙 : 특정 메소드가 상위 타입을 인자로 사용할 때, 그 타입의 하위 타입도 문제 없이 작동해야 함
의존관계 역전의 원칙 : 상위 계층이 하위 계층에 의존하는 전통적인 의존관계를 반전(역전)시킴으로써 상위 계층이 하위 계층의 구현으로부터 독립되게 할 수 있음


	<문제 해설>
Rumbaugh(럼바우) 방법
모든 소프트웨어 구성 요소를 그래픽 표기법을 이용하여 모델링하는 기법으로, 객체 모델링 기법(Object Modeling Technique) 라고도 한다. 분석활동은 객체모델링 -> 동적 모델링 -> 기능 모델링 순으로 통해 이루어진다

Booch(부치) 방법
미시적(Micro) 개발 프로세스와 거시적(Macro) 개발 프로세스를 모두 사용하는 분석 방법으로, 클래스와 객체들을 분석 및 식별하고 클래스의 속성과 연산을 정의한다.

Jacobson 방법
Use Case를 강조하여 사용하는 분석 방법이다.

Coad와 Yourdon 방법
E-R 다이어그램을 사용하여 객체의 행위를 모델링하며, 객체 식별, 구조 식별, 주제 정의, 속성과 인스턴스 연결 정의, 연산과 메시지 연결 정의 등의 과정으로 구성하는 기법

Wirfs-Brock 방법
분석과 설계 간의 구분이 없고, 고객 명세서를 평가해서 설계 작업까지 연속적으로 수행하는 기법




생성패턴
- 추상팩토리(Abstract Factory)
- 빌더(Builder)
- 팩토리메서드(FactoryMethod)
- 프로토타입(Prototype)
- 싱글톤(Singleton)

구조패턴
- 어댑터(Adapter)
- 브리지(Bridge)
- 컴포지트(Composite)
- 데코레이터(Decorator)
- 파사드(Facade)
- 플라이웨이트(Flyweight)
- 프록시(Proxy)

행위패턴
- 책임 연쇄(Chain of Responsibility)
- 커맨드(Command)
- 인터프리터(InterPreter)
- 이터레이터(Iterator)
- 중재자(Mediator)
- 메멘토(Memento)
- 옵서버(Observer)
- 상태(State)
- 전략(Strategy)
- 템플릿메서드(Template Method)
- 방문자(Visitor)



	<문제 해설>
객체지향의 주요 개념(원칙)
캡슐화(Encapsulation)
-데이터와 데이터를 처리하는 함수를 하나로 묶은 것
-캡슐화된 객체의 세부 내용이 은폐되어 변경이 발생해도 오류의 파급효과가 적음
-캡슐화된 객체들은 재사용이 용이함
-인터페이스가 단순해지고 객체간의 결합도가 낮아짐

상속성(Inheritance)
-객체지향 프로그래밍에서 이미 정의된 상위 클래스(부모 클래스)의 모든 속성과 연산을 하위 클래스가 상속(물려)받는 것
-하위 클래스는 상위 클래스로부터 받은 속성과 연산 외에도 새로운 것을 첨가 가능
-클래스의 재사용, 소프트웨어의 재사용을 높이는 중요한 개념

+ 속성과 연산 등을 물려주는 클래스를 상위 클래스 또는 슈퍼 클래스, 물려받는 클래스를 하위 클래스 또는 서브 클래스라고 한다.

다형성(Polymorphism)
-하나의 메시지에 대해 각 객체가 갖고 있는 고유한 방법대로 응답하는 것을 의미
-하나의 클래스나 메서드가 다양한 방식으로 동작이 가능한 것을 의미
-오버로딩과 오버라이딩이 존재
[해설작성자 : comcbt.com 이용자]

추상화(abstraction)
-데이터들의 공통된 성질을 추출해 슈퍼 클래스 선정
[해설작성자 : 콩이언니]


	<문제 해설>
1. 하향식 통합 테스트 ( Top Down Integration Test )
  a. 깊이 우선 통합법, 넓이 우선 통합법 사용
  b. 테스트 초기 부터 사용자에게 시스템 구조 보여줄 수 있다.
  c. 상위 모듈에서는 tc를 사용하기 어렵다.
  d. 상위 모듈에서 하위 모듈 방향으로 통합하면서 테스트하는 기법
  e. 절차
    - 주요 제어 모듈은 작성된 프로그램을 사용하고, 주요 제어 모듈의 종속 모듈들은 스텁 ( stub )로 대체 한다.
    - 깊이우선 or 넓이 우선 등의 통합방식에 따라, 하위 모듈인 스텁들이 한 번에 하나씩 실제모듈로 교체된다.
    - 모듈이 통합될 때마다 테스트 실시
    - 새로운 오류가 발생하지 않음을 보증 하기 위해 회귀 테스트 실시

2. 상향식 통합 테스트 ( Bottom Up Integration Test )
  a. 하위 모듈에서 상위 모듈 방향으로 통합하면서 테스트 하는 방법
  b. 가장 하위 단계의 모듈부터 통합 및 테스트가 수행되므로 스텁은 필요하지 않다.
  c. 하나의 주요 제어 모듈과 관련된 종속 모듈의 그룹인 클러스터( cluster )는 필요하다.
  d. 절차
    - 하위 모듈을 클러스터로 결합
    - 상위 모듈에서 데이터의 입출력을 확인하기 위해, 모듈인 드라이버 작성
    - 통합된 클러스터 단위로 테스터
   - 테스트가 완료되면 클러스터는 프로그램 구조의 상위로 이동 하여 결합하고, 드라이버는 실제 모듈로 대체
[해설작성자 : mook]

하향식 설계
-계층 구조상에서 시스템의 주요 컴포넌트들을 찾고 그것을 낮은 수준의 컴포넌트들로 분해하는 것으로 단계적 정제라 하며 메인 모듈의 설계에서 시작하여 단계적으로 구체화시키는 것
-하향식 설계에서는 통합 검사 시 인터페이스가 이미 정의되어 있어 통합이 간단하다.
-하향식 설계에서 레벨이 낮은 데이터 구조의 세부 사항은 설계초기 단계에서 필요하다.
상향식 설계
-가장 기본적인 컴포넌트를 먼저 설계한 다음 이것을 사용하는 상위 수준의 컴포넌트를 설계하는 것
-상향식 설계는 최하위 수준에서 각각의 모듈들을 설계하고 이러한 모듈이 완성되면 이들을 결합하여 검사한다.
-기존 컴포넌트들을 조합하여 시스템을 개발하는 경우에는 상향식이 적합
시스템 명세가 명확한 경우와 모든 것을 새로 개발하는 작업에는 하향식이 적합하다.
[해설작성자 : 까르르까르르까르르]



럼바우 분석기법
객,동,기
객체 모델링 : 정보 모델링, 시스템에서 요구, 객체 다이어그램
동적 모델링 : 제어, 흐름, 동작, 상태 다이어그램
기능 모델링 : DFD


  	<문제 해설>
패키저: 콘텐츠를 메타 데이터와 함께 배포 가능한 단위로 묶는 기능
디지털 저작권 관리(DRM) 구성요소
- 콘텐츠 제공자: 콘텐츠를 제공하는 저작권자
- 콘텐츠 분배자: 암호화된 콘텐츠 제공
- 패키저: 콘텐츠를 메타 데이터와 함께 배포 가능한 단위로 묶는 기능
- 보안 컨테이너: 원본을 안전하게 유통하기 위한 전자적 보안장치
- DRM 컨트롤러: 배포된 콘텐츠의 이용 권한을 통제
- 클리어링 하우스: 소비자와 유통업자 사이에 발생하는 거래에 대해 디지털 저작권 라이선싱을 중개하고 라이선스 발급을 수행하는 장소
[해설작성자 : ㄱㄱㅇ]


2 무결성
개체무결성 = 모든 테이블이 기본키로선택된 컬럼을 가져야함
참조무결성 = 참조관계의 두 테이블의 데이터가 항상 일관된 값을 갖도록 유지하는것을 말합니다잉~
도메인무결성 = 테이블에 존재하는 필드의 무결성을 보장하기 위한것 ex ) 어떤 값의 허용 에 대한 사항을 정의하고 올바른데이터가 입력되엇는가 확인하는것
무결성규칙 = db에서 무결성규칙은 데이터무결성을 지키기 위한 모든 제약사항을 뜻함


개체 무결성 : 기본키는 null 값이 될 수 없음
2. 참조 무결성 : 외래키는 참조할 수 없는 값을 가질 수 없음
3. 도메인 무결성 : 특정 속성값은 그 속성이 정의된 도메인에 속한 값이어야 함
[해설작성자 : 오니]


관계대수 연산에는 : 절차적
1. 일반 집합 연산자
합집합
교집합
차집합
카티션 프로덕트

2. 순수 관계 연산자
셀렉트
프로젝트
조인
디비전

- Selection Sort - 배열 내에서 최소값을 찾은 다음 정렬 되지 않은 맨 앞 값과 교환을 하며 정렬을 해 나아가는 방법 (정렬 시간 복잡도 모두 O(n^2))
- Bubble Sort - 왼쪽에서 부터 두 데이터를 비교해서 앞에 있는 데이터가 뒤에 있는 데이터 보다 크면 자리를 바꾸는 정렬 알고리즘(정렬 시간 복잡도 모두 O(n^2))
- Insert Sort - 한 개의 값을 추출한 다음 앞쪽으로 비교해서 본인의 자리를 알맞게 찾아가게끔 하는 정렬 방법. 정렬 시간 복잡도는 최상일 경우 O(n), 평균과 최악일 경우 O(n^2)
- 병합 정렬 - 또한 분할 정복에 기반한 알고리즘으로 리스트를 1 이하인 상태까지 절반으로 자른 다음 재귀적으로 합병 정렬을 이용해서 전체적인 리스트를 합병하는 정렬 과정. O(n log n)
※ n(n-1)/2 = O(n^2)
[해설작성자 : 나태규]

정렬이란? 여러 개의 자료를 순서에 따라 나열하는 방법
8개 종류: [선택, 버블, 삽입, 쉘, 퀵, 힙, 이진병합, 버킷정렬]

종류 최상 평균 최악
선택 정렬 O(n) O(n2) O(n2)
버블 정렬 O(n2) O(n2) O(n2)
삽입 정렬 O(n2) O(n2) O(n2)
쉘 정렬 O(n) O(n1.5) O(n2)
퀵 정렬 O(nlog2n) O(nlog2n) O(n2)
힙 정렬 O(nlog2n) O(nlog2n) O(nlog2n)
이진병합 정렬 O(nlog2n) O(nlog2n) O(nlog2n)
버킷 정렬 O(dn) O(dn) O(dn)
[해설작성자 : SD.신동]

퀵 정렬: 분할 정복 알고리즘의 하나로, 평균적으로 매우 빠른 수행 속도를 자랑하는 정렬 방법
- 하나의 리스트를 피벗(pivot)을 기준으로 두 개의 비균등한 크기로 분할하고 분할된 부분 리스트를 정렬한 다음, 두 개의 정렬된 부분 리스트를 합하여 전체가 정렬된 리스트가 되게 하는 방법


슈퍼키 : 유일성을 만족하는 속성 또는 속성들의 집합
후보키 : 유일성과 최소성을 만족하는 속성 또는 속성들의 집합
대체키 : 기본키로 선택되지 못한 후보키
외래키 : 다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합

기본키(Primary key)
기본키는 후보키 중에서 특별히 선정된 주키(Main Key)이며 한 릴레이션에서 특정 튜플을 유일하게 구별할 수 있는 속성이다. 기본키는 중복된 값을 가질 수 없으며 NULL값을 가질 수 없다.

대체키(Alternate Key)
대체키는 후보키가 둘 이상일 때 기본키를 제외한 나머지 후보키를 의미한다. 대체키를 보조키라고도 한다.

슈퍼키(Super Key)
슈퍼키는 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키를 말한다. 릴레이션을 구성하는 모든 튜플 중 슈퍼키로 구성된 속성의 집합과 동일한 값은 나타내지 않는다. 슈퍼키는 릴레이션을 구성하는 모든 튜플에 대해 유일성은 만족하지만, 최소성은 만족하지 못한다.

외래키(Foreign Key)
외래키는 다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합을 의미한다. 한 릴레이션에 속한 속성 A와 참조 릴레이션의 기본키인 B가 동일한 도메인상에서 정의되었을 때의 속성 A를 외래키라고 한다. 외래키로 지정되면 참조 릴레이션의 기본키에 없는 값은 입력할 수 없다.

개념적 설계 : 트랜잭션 모델링/ 독립적인 개념 스키마 모델링/ 개념스키마 설계/ E-R 다이어그램
논리적 설계 : 트랜잭션 인터페이스 설계/ DBMS에 맞는 논리스키마 설계/ 테이블 설계/ 논리적 매핑/ 스키마 평가 및 정제
물리적 설계 : 레코드 집중의 분석,설계/ 저장레코드 양식 설계 / 저장 구조 및 액세스 경로 설정


1.개체 무결성 : 각 릴레이션의 기본키를 구성하는 속성은 널(NULL) 값이나 중복된 값을 가질 수 없습니다.
2,참조무결성 : 외래키 값은 NULL이거나 참조하는 릴레이션의 기본키 값과 동일해야 합니다.
3.도메인 무결성 : 속성들의 값은 정의된 도메인에 속한 값이어야 합니다.
4.고유 무결성 : 특정 속성에 대해 고유한 값을 가지도록 조건이 주어진 경우, 릴레이션의 각 튜플이 가지는 속성 값들은 서로 달라야 합니다.
5.NULL 무결성 : 릴레이션의 특정 속성 값은 NULL 될 수 없습니다.
6.키 무결성 : 각 릴레이션은 최소한 한 개 이상의 키가 존재해야 합니다.

1. 원자화
2. 부분 함수 종속 제거
3. 이행 함수 종속 제거
BCNF. 결정자 함수 종속
4. 다치 종속성 제거
5NF 조인 종속성 제거

로킹 (병행제어 기법의 종류 중 하나)
-직렬화 기법
-데이터베이스, 파일, 레코드 등은 로킹단위가 될 수 있음.
-로킹 단위가 작아지면, 데이터 베이스 공유도 증가.
-로킹 단위가 작아지면, 로킹 오버헤드 증가.
-로킹 단위가 작아지면, 로크의 수 증가.
-로킹 단위가 작아지면, 병행성 수준이 높아짐.
-한꺼번에 로킹할 수 있는 객체의 크기를 로킹단위 라고 함.

	<문제 해설>
화이트박스 테스트의 종류
1. 기초경로 검사
2. 제어구조 검사

화이트박스 테스트 검증 기준
1. 문장 검증 기준
2. 분기 검증 기준
3. 조건 검증기준
4. 분기/조건 기준

블랙박스 테스트의 종류
1. 동치(동등)분할 검사
2. 경계값 분석
3. 원인-효과 검사
4. 오류 예측 검사
5. 비교검사
[해설작성자 : JYH]




1. DDL (정의)
-CREATE (정의)
-ALTER (변경)
-DROP (삭제)
2. DML (조작)
-SELECT (검색)
-INSERT (삽입)
-DELETE (삭제)
-UPDATE (갱신)
3. DCL (제어)
-COMMIT (완료)
-ROLLBACK (되돌림)
-GRANT (권한부여)
-REVOKE (권한취소)



Atomicity(원자성)
1. 트랜잭션의 연산은 데이터베이스에 모두 반영되든지 아니면 전혀 반영되지 않아야 한다.
2. 트랜잭션 내의 모든 명령은 반드시 완벽히 수행되어야 하며, 모두가 완벽히 수행되지 않고 어느하나라도 오류가 발생하면 트랜잭션 전부가 취소되어야 한다.

Consistency(일관성)
1. 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환한다.
2. 시스템이 가지고 있는 고정요소는 트랜잭션 수행 전과 트랜잭션 수행 완료 후의 상태가 같아야 한다.

Isolation(독립성,격리성)
1. 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 어느 하나의 트랜잭션 실행중에 다른 트랜잭션의 연산이 끼어들 수 없다.
2. 수행중인 트랜잭션은 완전히 완료될 때까지 다른 트랜잭션에서 수행 결과를 참조할 수 없다.

Durablility(영속성,지속성)
1. 성공적으로 완료된 트랜잭션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 한다.




<문제 해설>
1. 제 1 정규형 : 릴레이션에 속한 모든 속성의 도메인이 더는 분해되지 않는 원자값으로만 구성되어 있음
2. 제 2 정규형 : 제 1 정규형에 속하고, 기본키가 아닌 모든 속성이 기본키에 완전 함수 종속 되어야 함
3. 제 3 정규형 : 제 2 정규형에 속하고 기본키가 아닌 모든 속성이 기본키에 이행적 함수 종속이 되지 않을 시 속함
4. 제 4 정규형 : 보이스/코드 정규형을 만족하며 함수 종속이 아닌 다치 종속 제거시 만족
5. 제 5 정규형 : 제 4 정규형을 만족하며 후보키를 통하지 않는 조인 종속 제거해야 만족



3
ARQ
Stop-and-Wait ARQ(정지-대기 ARQ): 송신 측이 하나의 블록을 전송한 후 수신 측에서 에러의 발생을 점검한 다음, 에러 발생 유무 신호를 보내올 때까지 기다리는 방식
- Go-Back-N ARQ: 여러 블록을 연속적으로 전송하고, 수신 측에서 부정 응답(NAK)을 보내오면 송신 측이 오류가 발생한 블록부터 모두 재 전송
- Selective-Repeat ARQ(선택적 재전송 ARQ): 여러 블록을 연속적으로 전송하고, 수신측에서 부정 응답(NAK)을 보내오면 송신 측이 오류가 발생한 블록만을 재전송
- Adaptive ARQ(적응적 ARQ): 전송 효율을 최대로 하기 위해서 데이터 블록의 길이를 채널의 상태에 따라 동적으로 변경하는 방식


IP
00000000 A 0
10000000 B 128
11000000 C 192
11100000 D 224
11110000 E 240
A class에 속하는 ip 주소 범위: 0.0.0.0 ~ 127.255.255.255
B class에 속하는 ip 주소 범위: 128.0.0.0 ~ 191.255.255.255
C class에 속하는 ip 주소 범위: 192.0.0.0 ~ 223.255.255.255

D class와 E class는 각각 멀티캐스트용, 연구용으로 사용됩니다.
D class ip 주소 범위: 224.0.0.0 ~ 239.255.255.255
E class ip 주소 범위: 240.0.0.0 ~ 255.255.255.255



프로세스
- 디스패치 (Dispatch) : 준비 -> 실행
- 할당시간초과 (Time Run Out) : 실행 -> 준비
- 대기 (Block) : 실행 -> 대기
- 깨움 (Wake Up) : 대기 -> 준비

페이지 교체
OPT - Optimal : 앞으로 가장 오랫동안 사용되지 않을 페이지 교체
FIFO - First In First Out
LRU - Least Recently Used : 가장 오랫동안 사용되지 않은 페이지 교체
LFU - Least Frequently Used : 참조 횟수가 가장 작은 페이지 교체
MFU - Most Frequently used : 참조 횟수가 가장 많은 페이지 교체
NUR - Not Used Recently : 최근에 사용하지 않은 페이지 교체

4장
Pv4와 IPv6의 차이는 정보처리기사 뿐만이 아니라 대부분의 IT관련 시험에서 다루고 있음
주로 다루는 차이점과 핵심 단어는 아래와 같음
1) IPv4
ㄱ. 32비트 주소
ㄴ. 유니캐스트/멀티캐스트/브로드캐스트 사용
2) IPv6
ㄱ. 128비트 주소
ㄴ. 기존 IPv4의 주소 부족 문제를 해결하기 개발
ㄷ. 인증성/기밀성/무결성 지원 (=보안성 강화)
ㄹ. 유니캐스트, 애니캐스트, 멀티캐스트 사용
[해설작성자 : 단기합격은 유튜브 윤파고]

IPv6 헤더의 경우는 40 octet의 고정된 길이를 가진다.
[해설작성자 : BJY]

1번 보면 "패킷 헤더"라고 했기 때문에 오답이다.
IPv4는 헤더가 가변적이고, 주소크기는 32bit
IPv6는 헤더가 40byte(320bit)로 고정되어 있고, 주소크기는 128bit

c언어 변수
사용가능: 영문(대문자,소문자), 숫자, _ (under bar)
불가능: 첫자리 숫자 사용X, 예약어X

1계층 - 물리계층(Physical Layer) : Coax, Fiber, Wireless
2계층 - 데이터 링크계층(DataLink Layer) : Ethernet, SLIP, PPP, FDDI, HDLC
3계층 - 네트워크 계층(Network Layer) : IP, IPSec, ICMP, IGMP
4계층 - 전송 계층(Transport Layer) : TCP, UDP, ECN, SCTP, DCCP
5계층 - 세션 계층(Session Layer) : VARIOUS API;S, SOCKETS
6계층 - 표현 계층(Presentation Layer) : SSL, FTP, IMAP, SSH
7계층 - 응용 계층(Application Layer) : HTTP, FTP, IRC, SSH, DNS

1. 데커의 알고리즘
- 프로세스가 두개일때 상호 배제를 보장하는 최초의 알고리즘
- flag와 turn 변수를 사용하여 조정
2. 램퍼드 알고리즘
- 프로세스 n개의 상호 배제 문제를 해결한 알고리즘
- 프로세스에게 고유한 번호를 부여하고, 번호를 기준으로 우선순위를 정하여 우선순위가 높은 프로세스가 먼저 임계구역에 진입하도록 구현.
3. 피터슨 알고리즘
- 프로세스가 두개일때 상호 배제를 보장, 데커의 알고리즘과 유사하지만 상대방에게 진입 기회를 양보한다는 차이가 있고 보다 더 간단하게 구현됨
4. 세마포어
- 공유된 자원의 데이터 혹은 임계영역 등에 따라 여러 Process 혹은 Thread가 접근하는 것을 막아줌(동기화 대상이 하나 이상)
[해설작성자 : 강썬]

5장
침입탐지 시스템 IDS
이상탐지(Anomaly Detection) -> Behavior, Statistical Detection로 불리며 평균적 시스템의 상태 기준으로 비정상적인 행위나 자원의 사용이 감지되면 이를 알려줌
오용탐지(Misuse Detection) -> Signature Base나 Knowledge Base로 불리며 미리 입력해둔 공격 패턴이 감지되면 이를 알려줌
[해설작성자 : 케인인님두판해요]

침입 탐지 시스템의 모델
- 오용탐지 : 잘 알려진 시스템의 취약점을 공격하는 패턴의 침입을 탐지 (새로운 공격 패턴을 막기 어려움)
- 이상탐지 : 잘 알려지지 않은 공격 탐지에 적합, 기존 패턴과 급격하게 다른 패턴을 발견하면 침입으로 판단


자료접근제어
강제접근통제(Mandatory Access Control), 주체와 객체의 등급을 비교하여 접근 권한을 부여하는 방식
임의접근통제(Discretionary Access Control), 접근하는 사용자의 신원에 따라 접근 권한을 부여하는 방식
사용자계정컨트롤(User Access Control), 프로그램에서 관리자 수준의 권한이 필요한 작업을 수행할 때 사용자에게 알려서 제어할 수 있도록 돕는 기능
자료별 접근통제(Data-Label Access Control > Label-Based Access Control), 개별 행, 열에 대해 쓰기 권한, 읽기 권한을 가졌는지를 명확하게 결정하는 제어 방식

암호화키
단방향
양방향
	대칭 키
	비대칭 키



	<문제 해설>
MQTT 프로토콜
- IBM 개발
- 발행/구독 프로토콜
- TCP/IP를 통해 실행되어 기본 네트워크 연결을 제공
[해설작성자 : 오늘은망고]


 SSO 인증 : 여러 시스템 중 하나의 시스템에 인증을 성공하면 다른 시스템의 접근 권한도 모두 얻는 방식


Hash와 Encryption 차이
- Hash : 단방향, 복호화 불가능
- Encryption : 양방향, 역으로 복호화 가능

패스워드는 보통 단방향 Hash를 기본으로 저장

문제점
같은 패스워드를 hashing하면 같은 결과값이 나타나게되고 이는 문제를 발생함

해결법
이를 위해 다른 암호 값으로 저장되도록 추가되는 값 = Salt
의미 그대로 소금친다는 뜻에서 Salt라고 불림



1. Effort Per Task 기법 - (LOC기법을 보완하기위함)각 기능을 구현시키는 데 필요한 노력을 생명 주기의 각 단계별로 산정
2. 전문가 감정 기법 - 두 명이상의 전문가에게 비용 산정을 의뢰하는 기법, 개인적이고 주관적
3. 델파이 기법 - (전문가감정 기법의 주관적인 편견 보완하기위함)한명의 조정자와 여러 전문가의 의견을 종합하여 산정하는 기법
4. LOC기법 - 원시코드라인수(source line of code)의 비관치, 낙관치, 기대치를 측정 예측치 구함, 본문문제내용동일.
cf. 2&3의 경우 - 하향식 비용 산정 기법이며 1&4의 경우 상향식 비용 산정 기법이다.



블루버그: 블루투스 장비사이의 취약한 연결 관리를 악용한 공격
블루스나프(블루스나핑): 블루투스의 취약점을 활용하여 장비의 파일에 접근하는 공격으로 OPP를 사용하여 정보를 열람
블루재킹: 블루투스를 이용해 스팸처럼 명함을 익명으로 퍼뜨리는 것




(Role Based Access Control)
역할 기반 접근통제
권한이 있는 사용자들만 접근할 수 있는 보안 방법
[해설작성자 : 우리스카이]

DAC  임의접근통제  사용자또는 신분
MAC 강제접근통제.  미리 정해진 정책과 보안 등급
[해설작성자 : 산익]

MAC (Mandatory Access Control)
- 강제 접근 통제
- 미리 정해진 자원의 보안 레벨과 사용자에게 허락된 접근 권한 비교

DAC (Discretionary Access Control)
- 임의적 접근통제
- 자원에 대한 접근을 사용자나 그룹의 신분에 따라 제한
- 자원의 소유권을 가진 사람이 다른 사람의 접근을 허용하거나 제한할 수 있음

RBAC (Role Based Access Control)
- 사용자 역할에 따른 접근 통제
- 개별적인 신분이 아니라 조직 내 그룹 / 역할에 따라 부여






